//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace deneme {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ds_ilet : DataSet {
        
        private tbl_iletDataTable tabletbl_ilet;
        
        public ds_ilet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ds_ilet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbl_ilet"] != null)) {
                    this.Tables.Add(new tbl_iletDataTable(ds.Tables["tbl_ilet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_iletDataTable tbl_ilet {
            get {
                return this.tabletbl_ilet;
            }
        }
        
        public override DataSet Clone() {
            ds_ilet cln = ((ds_ilet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tbl_ilet"] != null)) {
                this.Tables.Add(new tbl_iletDataTable(ds.Tables["tbl_ilet"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletbl_ilet = ((tbl_iletDataTable)(this.Tables["tbl_ilet"]));
            if ((this.tabletbl_ilet != null)) {
                this.tabletbl_ilet.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ds_ilet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ds_ilet.xsd";
            this.Locale = new System.Globalization.CultureInfo("tr-TR");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletbl_ilet = new tbl_iletDataTable();
            this.Tables.Add(this.tabletbl_ilet);
        }
        
        private bool ShouldSerializetbl_ilet() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tbl_iletRowChangeEventHandler(object sender, tbl_iletRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbl_iletDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUserID;
            
            private DataColumn columnHareketID;
            
            private DataColumn columnIletiID;
            
            private DataColumn columnMetin;
            
            private DataColumn columnEski;
            
            private DataColumn columnKartID;
            
            private DataColumn columnKonu;
            
            private DataColumn columnUserName;
            
            internal tbl_iletDataTable() : 
                    base("tbl_ilet") {
                this.InitClass();
            }
            
            internal tbl_iletDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn HareketIDColumn {
                get {
                    return this.columnHareketID;
                }
            }
            
            internal DataColumn IletiIDColumn {
                get {
                    return this.columnIletiID;
                }
            }
            
            internal DataColumn MetinColumn {
                get {
                    return this.columnMetin;
                }
            }
            
            internal DataColumn EskiColumn {
                get {
                    return this.columnEski;
                }
            }
            
            internal DataColumn KartIDColumn {
                get {
                    return this.columnKartID;
                }
            }
            
            internal DataColumn KonuColumn {
                get {
                    return this.columnKonu;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            public tbl_iletRow this[int index] {
                get {
                    return ((tbl_iletRow)(this.Rows[index]));
                }
            }
            
            public event tbl_iletRowChangeEventHandler tbl_iletRowChanged;
            
            public event tbl_iletRowChangeEventHandler tbl_iletRowChanging;
            
            public event tbl_iletRowChangeEventHandler tbl_iletRowDeleted;
            
            public event tbl_iletRowChangeEventHandler tbl_iletRowDeleting;
            
            public void Addtbl_iletRow(tbl_iletRow row) {
                this.Rows.Add(row);
            }
            
            public tbl_iletRow Addtbl_iletRow(int UserID, int HareketID, string Metin, System.Byte Eski, int KartID, string Konu, string UserName) {
                tbl_iletRow rowtbl_iletRow = ((tbl_iletRow)(this.NewRow()));
                rowtbl_iletRow.ItemArray = new object[] {
                        UserID,
                        HareketID,
                        null,
                        Metin,
                        Eski,
                        KartID,
                        Konu,
                        UserName};
                this.Rows.Add(rowtbl_iletRow);
                return rowtbl_iletRow;
            }
            
            public tbl_iletRow FindByIletiID(int IletiID) {
                return ((tbl_iletRow)(this.Rows.Find(new object[] {
                            IletiID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tbl_iletDataTable cln = ((tbl_iletDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tbl_iletDataTable();
            }
            
            internal void InitVars() {
                this.columnUserID = this.Columns["UserID"];
                this.columnHareketID = this.Columns["HareketID"];
                this.columnIletiID = this.Columns["IletiID"];
                this.columnMetin = this.Columns["Metin"];
                this.columnEski = this.Columns["Eski"];
                this.columnKartID = this.Columns["KartID"];
                this.columnKonu = this.Columns["Konu"];
                this.columnUserName = this.Columns["UserName"];
            }
            
            private void InitClass() {
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnHareketID = new DataColumn("HareketID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHareketID);
                this.columnIletiID = new DataColumn("IletiID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIletiID);
                this.columnMetin = new DataColumn("Metin", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMetin);
                this.columnEski = new DataColumn("Eski", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEski);
                this.columnKartID = new DataColumn("KartID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKartID);
                this.columnKonu = new DataColumn("Konu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKonu);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnIletiID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnHareketID.AllowDBNull = false;
                this.columnIletiID.AutoIncrement = true;
                this.columnIletiID.AllowDBNull = false;
                this.columnIletiID.ReadOnly = true;
                this.columnIletiID.Unique = true;
                this.columnMetin.AllowDBNull = false;
                this.columnKartID.AllowDBNull = false;
                this.columnKonu.AllowDBNull = false;
                this.columnUserName.AllowDBNull = false;
            }
            
            public tbl_iletRow Newtbl_iletRow() {
                return ((tbl_iletRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tbl_iletRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tbl_iletRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_iletRowChanged != null)) {
                    this.tbl_iletRowChanged(this, new tbl_iletRowChangeEvent(((tbl_iletRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_iletRowChanging != null)) {
                    this.tbl_iletRowChanging(this, new tbl_iletRowChangeEvent(((tbl_iletRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_iletRowDeleted != null)) {
                    this.tbl_iletRowDeleted(this, new tbl_iletRowChangeEvent(((tbl_iletRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_iletRowDeleting != null)) {
                    this.tbl_iletRowDeleting(this, new tbl_iletRowChangeEvent(((tbl_iletRow)(e.Row)), e.Action));
                }
            }
            
            public void Removetbl_iletRow(tbl_iletRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbl_iletRow : DataRow {
            
            private tbl_iletDataTable tabletbl_ilet;
            
            internal tbl_iletRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_ilet = ((tbl_iletDataTable)(this.Table));
            }
            
            public int UserID {
                get {
                    return ((int)(this[this.tabletbl_ilet.UserIDColumn]));
                }
                set {
                    this[this.tabletbl_ilet.UserIDColumn] = value;
                }
            }
            
            public int HareketID {
                get {
                    return ((int)(this[this.tabletbl_ilet.HareketIDColumn]));
                }
                set {
                    this[this.tabletbl_ilet.HareketIDColumn] = value;
                }
            }
            
            public int IletiID {
                get {
                    return ((int)(this[this.tabletbl_ilet.IletiIDColumn]));
                }
                set {
                    this[this.tabletbl_ilet.IletiIDColumn] = value;
                }
            }
            
            public string Metin {
                get {
                    return ((string)(this[this.tabletbl_ilet.MetinColumn]));
                }
                set {
                    this[this.tabletbl_ilet.MetinColumn] = value;
                }
            }
            
            public System.Byte Eski {
                get {
                    try {
                        return ((System.Byte)(this[this.tabletbl_ilet.EskiColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_ilet.EskiColumn] = value;
                }
            }
            
            public int KartID {
                get {
                    return ((int)(this[this.tabletbl_ilet.KartIDColumn]));
                }
                set {
                    this[this.tabletbl_ilet.KartIDColumn] = value;
                }
            }
            
            public string Konu {
                get {
                    return ((string)(this[this.tabletbl_ilet.KonuColumn]));
                }
                set {
                    this[this.tabletbl_ilet.KonuColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    return ((string)(this[this.tabletbl_ilet.UserNameColumn]));
                }
                set {
                    this[this.tabletbl_ilet.UserNameColumn] = value;
                }
            }
            
            public bool IsEskiNull() {
                return this.IsNull(this.tabletbl_ilet.EskiColumn);
            }
            
            public void SetEskiNull() {
                this[this.tabletbl_ilet.EskiColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbl_iletRowChangeEvent : EventArgs {
            
            private tbl_iletRow eventRow;
            
            private DataRowAction eventAction;
            
            public tbl_iletRowChangeEvent(tbl_iletRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tbl_iletRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
